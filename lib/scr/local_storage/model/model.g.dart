// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Airport.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Airport TABLE
class TableAirport extends SqfEntityTableBase {
  TableAirport() {
    // declare properties of EntityTable
    tableName = 'airport';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('code', DbType.text),
      SqfEntityFieldBase('lat', DbType.text),
      SqfEntityFieldBase('lon', DbType.text),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('city', DbType.text),
      SqfEntityFieldBase('state', DbType.text),
      SqfEntityFieldBase('country', DbType.text),
      SqfEntityFieldBase('woeid', DbType.text),
      SqfEntityFieldBase('tz', DbType.text),
      SqfEntityFieldBase('phone', DbType.text),
      SqfEntityFieldBase('type', DbType.text),
      SqfEntityFieldBase('email', DbType.text),
      SqfEntityFieldBase('url', DbType.text),
      SqfEntityFieldBase('runway_length', DbType.text),
      SqfEntityFieldBase('elev', DbType.text),
      SqfEntityFieldBase('icao', DbType.text),
      SqfEntityFieldBase('direct_flights', DbType.text),
      SqfEntityFieldBase('carriers', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAirport();
  }
}
// END TABLES

// BEGIN SEQUENCES
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableAirport.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Airport
class Airport extends TableBase {
  Airport(
      {this.id,
      this.code,
      this.lat,
      this.lon,
      this.name,
      this.city,
      this.state,
      this.country,
      this.woeid,
      this.tz,
      this.phone,
      this.type,
      this.email,
      this.url,
      this.runway_length,
      this.elev,
      this.icao,
      this.direct_flights,
      this.carriers}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Airport.withFields(
      this.id,
      this.code,
      this.lat,
      this.lon,
      this.name,
      this.city,
      this.state,
      this.country,
      this.woeid,
      this.tz,
      this.phone,
      this.type,
      this.email,
      this.url,
      this.runway_length,
      this.elev,
      this.icao,
      this.direct_flights,
      this.carriers) {
    _setDefaultValues();
  }
  Airport.withId(
      this.id,
      this.code,
      this.lat,
      this.lon,
      this.name,
      this.city,
      this.state,
      this.country,
      this.woeid,
      this.tz,
      this.phone,
      this.type,
      this.email,
      this.url,
      this.runway_length,
      this.elev,
      this.icao,
      this.direct_flights,
      this.carriers) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Airport.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['code'] != null) {
      code = o['code'].toString();
    }
    if (o['lat'] != null) {
      lat = o['lat'].toString();
    }
    if (o['lon'] != null) {
      lon = o['lon'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['city'] != null) {
      city = o['city'].toString();
    }
    if (o['state'] != null) {
      state = o['state'].toString();
    }
    if (o['country'] != null) {
      country = o['country'].toString();
    }
    if (o['woeid'] != null) {
      woeid = o['woeid'].toString();
    }
    if (o['tz'] != null) {
      tz = o['tz'].toString();
    }
    if (o['phone'] != null) {
      phone = o['phone'].toString();
    }
    if (o['type'] != null) {
      type = o['type'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['url'] != null) {
      url = o['url'].toString();
    }
    if (o['runway_length'] != null) {
      runway_length = o['runway_length'].toString();
    }
    if (o['elev'] != null) {
      elev = o['elev'].toString();
    }
    if (o['icao'] != null) {
      icao = o['icao'].toString();
    }
    if (o['direct_flights'] != null) {
      direct_flights = o['direct_flights'].toString();
    }
    if (o['carriers'] != null) {
      carriers = o['carriers'].toString();
    }

    isSaved = true;
  }
  // FIELDS (Airport)
  int? id;
  String? code;
  String? lat;
  String? lon;
  String? name;
  String? city;
  String? state;
  String? country;
  String? woeid;
  String? tz;
  String? phone;
  String? type;
  String? email;
  String? url;
  String? runway_length;
  String? elev;
  String? icao;
  String? direct_flights;
  String? carriers;
  bool? isSaved;
  // end FIELDS (Airport)

  static const bool _softDeleteActivated = false;
  AirportManager? __mnAirport;

  AirportManager get _mnAirport {
    return __mnAirport = __mnAirport ?? AirportManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (code != null || !forView) {
      map['code'] = code;
    }
    if (lat != null || !forView) {
      map['lat'] = lat;
    }
    if (lon != null || !forView) {
      map['lon'] = lon;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (city != null || !forView) {
      map['city'] = city;
    }
    if (state != null || !forView) {
      map['state'] = state;
    }
    if (country != null || !forView) {
      map['country'] = country;
    }
    if (woeid != null || !forView) {
      map['woeid'] = woeid;
    }
    if (tz != null || !forView) {
      map['tz'] = tz;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (type != null || !forView) {
      map['type'] = type;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (url != null || !forView) {
      map['url'] = url;
    }
    if (runway_length != null || !forView) {
      map['runway_length'] = runway_length;
    }
    if (elev != null || !forView) {
      map['elev'] = elev;
    }
    if (icao != null || !forView) {
      map['icao'] = icao;
    }
    if (direct_flights != null || !forView) {
      map['direct_flights'] = direct_flights;
    }
    if (carriers != null || !forView) {
      map['carriers'] = carriers;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (code != null || !forView) {
      map['code'] = code;
    }
    if (lat != null || !forView) {
      map['lat'] = lat;
    }
    if (lon != null || !forView) {
      map['lon'] = lon;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (city != null || !forView) {
      map['city'] = city;
    }
    if (state != null || !forView) {
      map['state'] = state;
    }
    if (country != null || !forView) {
      map['country'] = country;
    }
    if (woeid != null || !forView) {
      map['woeid'] = woeid;
    }
    if (tz != null || !forView) {
      map['tz'] = tz;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (type != null || !forView) {
      map['type'] = type;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (url != null || !forView) {
      map['url'] = url;
    }
    if (runway_length != null || !forView) {
      map['runway_length'] = runway_length;
    }
    if (elev != null || !forView) {
      map['elev'] = elev;
    }
    if (icao != null || !forView) {
      map['icao'] = icao;
    }
    if (direct_flights != null || !forView) {
      map['direct_flights'] = direct_flights;
    }
    if (carriers != null || !forView) {
      map['carriers'] = carriers;
    }

    return map;
  }

  /// This method returns Json String [Airport]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Airport]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      id,
      code,
      lat,
      lon,
      name,
      city,
      state,
      country,
      woeid,
      tz,
      phone,
      type,
      email,
      url,
      runway_length,
      elev,
      icao,
      direct_flights,
      carriers
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      code,
      lat,
      lon,
      name,
      city,
      state,
      country,
      woeid,
      tz,
      phone,
      type,
      email,
      url,
      runway_length,
      elev,
      icao,
      direct_flights,
      carriers
    ];
  }

  static Future<List<Airport>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Airport.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Airport>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Airport>[];
    try {
      objList = list
          .map((airport) => Airport.fromMap(airport as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Airport.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Airport>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Airport> objList = <Airport>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Airport.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Airport by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Airport] if exist, otherwise returns null
  Future<Airport?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Airport? obj;
    final data = await _mnAirport.getById([id]);
    if (data.length != 0) {
      obj = Airport.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Airport) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnAirport.insert(this, ignoreBatch);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      await _mnAirport.update(this);
    }

    return id;
  }

  /// Saves the (Airport) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnAirport.insertOrThrow(this, ignoreBatch);
      if (saveResult != null && saveResult!.success) {
        isSaved = true;
      }
      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnAirport.updateOrThrow(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Airport> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Airport> airports) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in airports) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit();
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAirport.rawInsert(
          'INSERT OR REPLACE INTO airport (id, code, lat, lon, name, city, state, country, woeid, tz, phone, type, email, url, runway_length, elev, icao, direct_flights, carriers)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            code,
            lat,
            lon,
            name,
            city,
            state,
            country,
            woeid,
            tz,
            phone,
            type,
            email,
            url,
            runway_length,
            elev,
            icao,
            direct_flights,
            carriers
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Airport id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Airport id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Airport Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Airport>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Airport> airports) async {
    final results = await _mnAirport.rawInsertAll(
        'INSERT OR REPLACE INTO airport (id, code, lat, lon, name, city, state, country, woeid, tz, phone, type, email, url, runway_length, elev, icao, direct_flights, carriers)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        airports);
    return results;
  }

  /// Deletes Airport

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Airport invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnAirport
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAirport.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Airport] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  AirportFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AirportFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  AirportFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AirportFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion airport

// region AirportField
class AirportField extends FilterBase {
  AirportField(AirportFilterBuilder airportFB) : super(airportFB);

  @override
  AirportFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder isNull() {
    return super.isNull() as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as AirportFilterBuilder;
  }

  @override
  AirportFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as AirportFilterBuilder;
  }

  @override
  AirportField get not {
    return super.not as AirportField;
  }
}
// endregion AirportField

// region AirportFilterBuilder
class AirportFilterBuilder extends ConjunctionBase {
  AirportFilterBuilder(Airport obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnAirport = obj._mnAirport;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  AirportManager? _mnAirport;

  /// put the sql keyword 'AND'
  @override
  AirportFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  AirportFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  AirportFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  AirportFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  AirportFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  AirportFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  AirportFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AirportFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AirportFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AirportFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AirportFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  AirportField _setField(AirportField? field, String colName, DbType dbtype) {
    return AirportField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  AirportField? _id;
  AirportField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  AirportField? _code;
  AirportField get code {
    return _code = _setField(_code, 'code', DbType.text);
  }

  AirportField? _lat;
  AirportField get lat {
    return _lat = _setField(_lat, 'lat', DbType.text);
  }

  AirportField? _lon;
  AirportField get lon {
    return _lon = _setField(_lon, 'lon', DbType.text);
  }

  AirportField? _name;
  AirportField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  AirportField? _city;
  AirportField get city {
    return _city = _setField(_city, 'city', DbType.text);
  }

  AirportField? _state;
  AirportField get state {
    return _state = _setField(_state, 'state', DbType.text);
  }

  AirportField? _country;
  AirportField get country {
    return _country = _setField(_country, 'country', DbType.text);
  }

  AirportField? _woeid;
  AirportField get woeid {
    return _woeid = _setField(_woeid, 'woeid', DbType.text);
  }

  AirportField? _tz;
  AirportField get tz {
    return _tz = _setField(_tz, 'tz', DbType.text);
  }

  AirportField? _phone;
  AirportField get phone {
    return _phone = _setField(_phone, 'phone', DbType.text);
  }

  AirportField? _type;
  AirportField get type {
    return _type = _setField(_type, 'type', DbType.text);
  }

  AirportField? _email;
  AirportField get email {
    return _email = _setField(_email, 'email', DbType.text);
  }

  AirportField? _url;
  AirportField get url {
    return _url = _setField(_url, 'url', DbType.text);
  }

  AirportField? _runway_length;
  AirportField get runway_length {
    return _runway_length =
        _setField(_runway_length, 'runway_length', DbType.text);
  }

  AirportField? _elev;
  AirportField get elev {
    return _elev = _setField(_elev, 'elev', DbType.text);
  }

  AirportField? _icao;
  AirportField get icao {
    return _icao = _setField(_icao, 'icao', DbType.text);
  }

  AirportField? _direct_flights;
  AirportField get direct_flights {
    return _direct_flights =
        _setField(_direct_flights, 'direct_flights', DbType.text);
  }

  AirportField? _carriers;
  AirportField get carriers {
    return _carriers = _setField(_carriers, 'carriers', DbType.text);
  }

  /// Deletes List<Airport> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnAirport!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnAirport!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from airport ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnAirport!.updateBatch(qparams, values);
  }

  /// This method always returns [Airport] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Airport?
  @override
  Future<Airport?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnAirport!.toList(qparams);
    final data = await objFuture;
    Airport? obj;
    if (data.isNotEmpty) {
      obj = Airport.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Airport]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Airport?
  @override
  Future<Airport> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Airport();
  }

  /// This method returns int. [Airport]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? airportCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final airportsFuture = await _mnAirport!.toList(qparams);
    final int count = airportsFuture[0]['CNT'] as int;
    if (airportCount != null) {
      airportCount(count);
    }
    return count;
  }

  /// This method returns List<Airport> [Airport]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Airport>
  @override
  Future<List<Airport>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Airport> airportsData = await Airport.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return airportsData;
  }

  /// This method returns Json String [Airport]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Airport]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Airport]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnAirport!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Airport]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM airport WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnAirport!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Airport]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnAirport!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Airport.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnAirport!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AirportFilterBuilder

// region AirportFields
class AirportFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fCode;
  static TableField get code {
    return _fCode = _fCode ?? SqlSyntax.setField(_fCode, 'code', DbType.text);
  }

  static TableField? _fLat;
  static TableField get lat {
    return _fLat = _fLat ?? SqlSyntax.setField(_fLat, 'lat', DbType.text);
  }

  static TableField? _fLon;
  static TableField get lon {
    return _fLon = _fLon ?? SqlSyntax.setField(_fLon, 'lon', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fCity;
  static TableField get city {
    return _fCity = _fCity ?? SqlSyntax.setField(_fCity, 'city', DbType.text);
  }

  static TableField? _fState;
  static TableField get state {
    return _fState =
        _fState ?? SqlSyntax.setField(_fState, 'state', DbType.text);
  }

  static TableField? _fCountry;
  static TableField get country {
    return _fCountry =
        _fCountry ?? SqlSyntax.setField(_fCountry, 'country', DbType.text);
  }

  static TableField? _fWoeid;
  static TableField get woeid {
    return _fWoeid =
        _fWoeid ?? SqlSyntax.setField(_fWoeid, 'woeid', DbType.text);
  }

  static TableField? _fTz;
  static TableField get tz {
    return _fTz = _fTz ?? SqlSyntax.setField(_fTz, 'tz', DbType.text);
  }

  static TableField? _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField? _fType;
  static TableField get type {
    return _fType = _fType ?? SqlSyntax.setField(_fType, 'type', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fUrl;
  static TableField get url {
    return _fUrl = _fUrl ?? SqlSyntax.setField(_fUrl, 'url', DbType.text);
  }

  static TableField? _fRunway_length;
  static TableField get runway_length {
    return _fRunway_length = _fRunway_length ??
        SqlSyntax.setField(_fRunway_length, 'runway_length', DbType.text);
  }

  static TableField? _fElev;
  static TableField get elev {
    return _fElev = _fElev ?? SqlSyntax.setField(_fElev, 'elev', DbType.text);
  }

  static TableField? _fIcao;
  static TableField get icao {
    return _fIcao = _fIcao ?? SqlSyntax.setField(_fIcao, 'icao', DbType.text);
  }

  static TableField? _fDirect_flights;
  static TableField get direct_flights {
    return _fDirect_flights = _fDirect_flights ??
        SqlSyntax.setField(_fDirect_flights, 'direct_flights', DbType.text);
  }

  static TableField? _fCarriers;
  static TableField get carriers {
    return _fCarriers =
        _fCarriers ?? SqlSyntax.setField(_fCarriers, 'carriers', DbType.text);
  }
}
// endregion AirportFields

//region AirportManager
class AirportManager extends SqfEntityProvider {
  AirportManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'airport';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion AirportManager
class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES
